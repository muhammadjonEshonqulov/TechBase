package uz.teach.base.ui.mainimport android.Manifestimport android.app.AlertDialogimport android.content.pm.PackageManagerimport android.os.Buildimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.MenuItemimport android.view.Viewimport android.view.View.OnClickListenerimport android.widget.AdapterViewimport androidx.core.content.ContextCompatimport androidx.core.os.bundleOfimport androidx.core.view.GravityCompatimport androidx.fragment.app.viewModelsimport androidx.lifecycle.lifecycleScopeimport androidx.navigation.fragment.findNavControllerimport com.google.android.material.navigation.NavigationViewimport com.google.zxing.Resultimport dagger.hilt.android.AndroidEntryPointimport me.dm7.barcodescanner.zxing.ZXingScannerViewimport uz.teach.base.Rimport uz.teach.base.basethings.BaseFragmentimport uz.teach.base.basethings.LogoutDialogimport uz.teach.base.databinding.DialogEditBindingimport uz.teach.base.databinding.DialogResultBindingimport uz.teach.base.databinding.FragmentMainBindingimport uz.teach.base.model.checkup.CheckupBodyimport uz.teach.base.ui.MainActivityimport uz.teach.base.utils.NetworkResultimport uz.teach.base.utils.Prefsimport uz.teach.base.utils.decodeimport uz.teach.base.utils.hasInternetConnectionimport uz.teach.base.utils.lgimport uz.tsul.mobile.utils.collectLAimport uz.tsul.mobile.utils.navigateSafeimport javax.inject.Inject@AndroidEntryPointclass MainFragment : BaseFragment<FragmentMainBinding>(FragmentMainBinding::inflate), ZXingScannerView.ResultHandler, OnClickListener, NavigationView.OnNavigationItemSelectedListener {    private val CAMERA_REQUEST = 101    private var simpleQr = false    private val vm: MainViewModel by viewModels()    var link = ""    @Inject    lateinit var prefs: Prefs    override fun onViewCreatedd(view: View, savedInstanceState: Bundle?) {        binding.scannerView.setResultHandler(this)        binding.menu.setOnClickListener(this)        binding.navView.setNavigationItemSelectedListener(this)        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&            ContextCompat.checkSelfPermission(                requireContext(),                Manifest.permission.CAMERA            ) == PackageManager.PERMISSION_DENIED        ) {            requestPermissions(arrayOf(Manifest.permission.CAMERA), CAMERA_REQUEST)        } else {            binding.scannerView.startCamera()        }    }    private fun checkups(techniqueId: String?, rawResult: String) {        vm.checkups(techniqueId)        vm.checkupsResponse.collectLA(lifecycleScope) {            when (it) {                is NetworkResult.Loading -> {                    showLoader()                }                is NetworkResult.Success -> {                    closeLoader()                    it.data?.let {                        if (it.new_eligibility == null) {                            it.last_eligibility?.let {                                eligibility = it                            }                        } else {                            it.new_eligibility.let {                                eligibility = it                            }                        }                        check(rawResult)                    }                }                is NetworkResult.Error -> {                    closeLoader()                    check(rawResult)                    snackBar(it.message.toString())                }            }        }    }    private fun saveCheckups(techniqueId: String?, checkupBody: CheckupBody) {        vm.saveCheckups(techniqueId, checkupBody)        vm.saveCheckupsResponse.collectLA(lifecycleScope) {            when (it) {                is NetworkResult.Loading -> {                    showLoader()                }                is NetworkResult.Success -> {                    closeLoader()                    it.data?.let {                        if (it.success == true) {                            snackBar("Texnika holati muvofaqqiyatli o'zgartirildi")                            binding.scannerView.setResultHandler(this)                            binding.scannerView.startCamera()                        }                    }                }                is NetworkResult.Error -> {                    closeLoader()                    snackBar(it.message.toString())                }            }        }    }    var eligibility = "0"    private fun check(rawResult: String?, message: String? = null) {        var id: String? = ""        var result: String? = ""        val dialogView = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_result, null, false)        val dialogBinding = DialogResultBinding.bind(dialogView)        if (message != null) {            dialogBinding.qrScanResultMore.visibility = View.GONE        } else {            dialogBinding.qrScanResultMore.visibility = View.VISIBLE        }        val alertDialog = AlertDialog.Builder(requireContext())            .setView(dialogView)            .setTitle("").show()        alertDialog?.setCancelable(false)        try {            id = rawResult?.decode()?.split("%")?.toTypedArray()?.get(1)?.split("?")?.toTypedArray()?.get(0)?.decode()            result = rawResult?.decode()?.split("%")?.toTypedArray()?.get(0)?.decode()            simpleQr = false            dialogBinding.editBtn.setOnClickListener {                alertDialog.dismiss()                val dialogViewEdit = LayoutInflater.from(requireContext()).inflate(R.layout.dialog_edit, null, false)                val dialogEditBinding = DialogEditBinding.bind(dialogViewEdit)                val alertDialogEdit = AlertDialog.Builder(requireContext())                    .setView(dialogViewEdit)                    .setTitle("").show()                alertDialogEdit?.setCancelable(false)                dialogEditBinding.submit.setOnClickListener {                    alertDialogEdit.dismiss()                    saveCheckups(id, CheckupBody(eligibility = eligibility.toInt()))                }                dialogEditBinding.statusSpinner.setSelection(eligibility.toInt() - 1)                dialogEditBinding.statusSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {                    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {                        eligibility = (position + 1).toString()                    }                    override fun onNothingSelected(parent: AdapterView<*>?) {                    }                }            }        } catch (e: Exception) {            simpleQr = true            result = rawResult        }        if (simpleQr) {            try {                lg("result->" + result)                val array = result?.split("http")?.toTypedArray()                link = "http" + array?.get(1)                Log.d("TTT", "link: " + link)                result = array?.get(0)            } catch (e: Exception) {                dialogBinding.qrScanResultMore.visibility = View.GONE                Log.d("TTT", "another")                link = ""            }            dialogBinding.qrScanResultMore.setOnClickListener {                if (activity?.application?.let { it1 -> hasInternetConnection(it1) } == true) {                    alertDialog?.dismiss()                    findNavController().navigateSafe(R.id.action_mainFragment_to_WebViewFragment, bundleOf("link" to link))//                    startFragment(WebViewFragment(), link, isAnimate = true)                } else {                    snackBar("Tarmoqqa ulanmagansiz?")                }            }        } else {            link = "https://techniques-front.vercel.app/techniques/see/$id"            dialogBinding.qrScanResultMore.setOnClickListener {                alertDialog?.dismiss()                findNavController().navigateSafe(R.id.action_mainFragment_to_WebViewFragment, bundleOf("link" to link))            }        }        dialogBinding.qrScanResult.text = message ?: result        dialogBinding.qrScanBtn.setOnClickListener {            alertDialog?.dismiss()            binding.scannerView.setResultHandler(this)            binding.scannerView.startCamera()            result = ""            link = ""        }    }    override fun handleResult(rawResult: Result?) {        try {            val id = rawResult?.text?.decode()?.split("%")?.toTypedArray()?.get(1)?.split("?")?.toTypedArray()?.get(0)?.decode()            rawResult?.text?.let {                checkups(id, it)            }        } catch (e: Exception) {            check(rawResult?.text)        }    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        if (requestCode == CAMERA_REQUEST) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                binding.scannerView.startCamera()            } else {                // Permission denied                showErrorDialog()            }        }    }    private fun showErrorDialog() {        with(AlertDialog.Builder(requireContext()))        {            setTitle("Kamera uchun ruxsat")            setMessage("Kameradan foydalanish uchun sozlamalardan ruhsat bering")            setPositiveButton("Sozlamalarga kirish") { _, _ ->                (activity as MainActivity?)?.openPermissionSettings()            }            setCancelable(true)            show()        }    }    override fun onResume() {        super.onResume()        binding.scannerView.setResultHandler(this)        binding.scannerView.startCamera()    }    override fun onClick(v: View?) {        when (v) {            binding.menu -> {                binding.drawer.openDrawer(GravityCompat.START)            }        }    }    override fun onNavigationItemSelected(item: MenuItem): Boolean {        when (item.itemId) {            R.id.nav_logout -> {                val logoutDialog = LogoutDialog(requireContext())                logoutDialog.show()                logoutDialog.setOnCancelClick {                    logoutDialog.dismiss()                }                logoutDialog.setOnSubmitClick {                    prefs.clear()                    logoutDialog.dismiss()                    findNavController().navigateSafe(R.id.action_mainFragment_to_loginFragment)                }            }            R.id.nav_language -> {//                findNavController().navigateSafe(R.id.action_student_mainFragment_to_languageFragment)                snackBar(getString(R.string.proccessing))            }            R.id.nav_settings -> {                snackBar(getString(R.string.proccessing))//                findNavController().navigateSafe(R.id.action_student_mainFragment_to_settingsFragment)            }            R.id.nav_theme -> {                snackBar(getString(R.string.proccessing))//                findNavController().navigateSafe(R.id.action_student_mainFragment_to_themeFragment)            }        }        binding.drawer.closeDrawer(GravityCompat.START)        return true    }}